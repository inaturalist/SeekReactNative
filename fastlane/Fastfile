# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

fastlane_require "dotenv"

before_all do
  update_fastlane
  Dotenv.overload ".env"
end

default_platform(:android)

ANDROID_CAMERA_PATH = File.join( "..", "android", "app", "src", "main", "assets", "camera" )
IOS_CAMERA_PATH = File.join( "..", "ios" )

def android_taxonomy_present?
  path = File.join( ANDROID_CAMERA_PATH, "taxonomy.csv" )
  unless File.exist?( path )
    UI.abort_with_message! "Android production taxonomy file is missing at #{path}"
  end
end

def ios_taxonomy_present?
  path = File.join( IOS_CAMERA_PATH, "taxonomy.json" )
  unless File.exist?( path )
    UI.abort_with_message! "iOS production taxonomy file is missing at #{path}"
  end
end

def android_model_present?
  path = File.join( ANDROID_CAMERA_PATH, "optimized_model.tflite" )
  unless File.exist?( path )
    UI.abort_with_message! "Android production vision model file is missing at #{path}"
  end
end

def ios_model_present?
  path = File.join( IOS_CAMERA_PATH, "optimized_model.mlmodel" )
  unless File.exist?( path )
    UI.abort_with_message! "iOS production vision model file is missing at #{path}"
  end
end

def required_android_files_present?
  android_taxonomy_present?
  android_model_present?
end

def required_ios_files_present?
  ios_taxonomy_present?
  ios_model_present?
end

platform :ios do
  desc "Distributes a beta version of Seek on TestFlight"
  lane :beta do
    required_ios_files_present?
    # xcode_select("/Applications/Xcode-beta.app")
    get_certificates(username: ENV["USERNAME"]) # invokes cert
    get_provisioning_profile(username: ENV["USERNAME"],
                         app_identifier: ENV["APPLE_ID"]) # invokes sigh
    build_app(scheme: "Seek",
           workspace: "ios/Seek.xcworkspace",
           include_bitcode: false)
    upload_to_testflight(username: ENV["USERNAME"])
    app_store_build_number(live: false, username: ENV["USERNAME"], app_identifier: ENV["APPLE_ID"])
    slack(
      message: "Seek iOS beta successfully deployed!",
      success: true,
      slack_url: ENV["SLACK_WEBHOOK"],
      default_payloads: [:lane, :test_result, :git_branch, :last_git_commit_hash],
      attachment_properties: {
           fields: [
               {
                  title: "Version Number",
                  value: lane_context[SharedValues::LATEST_VERSION]
               },
               {
                 title: "Build Number",
                 value: lane_context[SharedValues::LATEST_BUILD_NUMBER]
               }
           ]
       })
  end

  lane :release do
    deliver(
      username: ENV["USERNAME"],
      build_number: lane_context[SharedValues::LATEST_BUILD_NUMBER],
      submit_for_review: true,
      automatic_release: false,
      force: false, # Skip HTMl report verification
      skip_metadata: false, # make sure Deliverfile has latest release notes
      skip_screenshots: true,
      skip_binary_upload: true,
      submission_information: {
        add_id_info_uses_idfa: false
      },
      precheck_include_in_app_purchases: false
    )
    slack(
      message: "Successfully uploaded a new App Store release build",
      success: true,
      slack_url: ENV["SLACK_WEBHOOK"],
      default_payloads: [:lane, :test_result, :git_branch, :last_git_commit_hash],
      attachment_properties: {
           fields: [
               {
                  title: "Version Number",
                  value: lane_context[SharedValues::LATEST_VERSION]
               },
               {
                 title: "Build Number",
                 value: lane_context[SharedValues::LATEST_BUILD_NUMBER]
               }
           ]
       })
  end
end

platform :android do
 desc "Distributes an Android bundle to the Play Store beta track"
 lane :beta do
    required_android_files_present?
    gradle(task: "bundle", build_type: "Release", project_dir: "android" )
    upload_to_play_store(track: "beta", package_name: ENV["PACKAGE_NAME"], skip_upload_apk: true)
    slack(
     message: "Seek Android beta successfully deployed!",
     success: true,
     slack_url: ENV["SLACK_WEBHOOK"],
     default_payloads: [:lane, :test_result, :git_branch, :last_git_commit_hash],
     attachment_properties: {
          fields: [
              {
                 title: "Version Number",
                 value: android_get_version_name(gradle_file: "android/app/build.gradle")
              },
              {
                title: "Build Number",
                value: android_get_version_code(gradle_file: "android/app/build.gradle")
              }
          ]
      })
 end

 desc "Build debug and test APK for screenshots"
  lane :build_for_screengrab do
    build_android_app(
      task: "assemble",
      build_type: "Debug"
    )
    build_android_app(
      task: "assemble",
      build_type: "AndroidTest"
    )
  end

end