// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HorizontalScroll should render correctly 1`] = `
<View
  style={
    {
      "height": 250,
    }
  }
>
  <View
    style={{}}
  >
    <RCTScrollView
      applyWindowCorrection={[Function]}
      bounces={false}
      canChangeSize={true}
      contentContainerStyle={
        {
          "backgroundColor": "#000000",
          "minHeight": 1,
          "minWidth": 1,
          "paddingBottom": 0,
          "paddingTop": 0,
        }
      }
      contentHeight={900}
      contentWidth={1050}
      data={
        [
          <View>
            <Text>
              Item 1
            </Text>
          </View>,
          <View>
            <Text>
              Item 2
            </Text>
          </View>,
          <View>
            <Text>
              Item 3
            </Text>
          </View>,
        ]
      }
      dataProvider={
        DataProvider {
          "_data": [
            <View>
              <Text>
                Item 1
              </Text>
            </View>,
            <View>
              <Text>
                Item 2
              </Text>
            </View>,
            <View>
              <Text>
                Item 3
              </Text>
            </View>,
          ],
          "_firstIndexToProcess": 0,
          "_hasStableIds": false,
          "_requiresDataChangeHandling": false,
          "_size": 3,
          "getStableId": [Function],
          "rowHasChanged": [Function],
        }
      }
      disableRecycling={false}
      estimatedItemSize={350}
      extendedState={{}}
      externalScrollView={[Function]}
      finalRenderAheadOffset={250}
      forceNonDeterministicRendering={true}
      getItemLayout={[Function]}
      horizontal={true}
      indicatorStyle="white"
      initialNumToRender={1}
      initialOffset={0}
      initialRenderIndex={0}
      isHorizontal={true}
      layoutProvider={
        GridLayoutProviderWithProps {
          "_acceptableRelayoutDelta": 1,
          "_getHeightOrWidth": [Function],
          "_getLayoutTypeForIndex": [Function],
          "_getSpan": [Function],
          "_hasExpired": false,
          "_isHorizontal": true,
          "_lastLayoutManager": GridLayoutManager {
            "_acceptableRelayoutDelta": 1,
            "_getSpan": [Function],
            "_isGridHorizontal": true,
            "_isHorizontal": true,
            "_layoutProvider": [Circular],
            "_layouts": [
              {
                "height": 900,
                "type": 0,
                "width": 350,
                "x": 0,
                "y": 0,
              },
              {
                "height": 900,
                "type": 0,
                "width": 350,
                "x": 350,
                "y": 0,
              },
              {
                "height": 900,
                "type": 0,
                "width": 350,
                "x": 700,
                "y": 0,
              },
            ],
            "_maxSpan": 1,
            "_renderWindowSize": {
              "height": 900,
              "width": 400,
            },
            "_totalHeight": 900,
            "_totalWidth": 1050,
            "_window": {
              "height": 900,
              "width": 400,
            },
          },
          "_maxSpan": 1,
          "_renderWindowSize": {
            "height": 900,
            "width": 400,
          },
          "_setLayoutForType": [Function],
          "_tempDim": {
            "height": 0,
            "width": 0,
          },
          "averageWindow": AverageWindow {
            "currentAverage": 350,
            "currentCount": 1,
            "inputValues": [
              350,
              ,
              ,
              ,
              ,
              ,
            ],
            "nextIndex": 1,
          },
          "defaultEstimatedItemSize": 100,
          "layoutObject": {
            "size": undefined,
            "span": undefined,
          },
          "props": {
            "bounces": false,
            "contentContainerStyle": {
              "backgroundColor": "#000000",
            },
            "data": [
              <View>
                <Text>
                  Item 1
                </Text>
              </View>,
              <View>
                <Text>
                  Item 2
                </Text>
              </View>,
              <View>
                <Text>
                  Item 3
                </Text>
              </View>,
            ],
            "estimatedItemSize": 350,
            "getItemLayout": [Function],
            "horizontal": true,
            "indicatorStyle": "white",
            "initialNumToRender": 1,
            "numColumns": 1,
            "onViewableItemsChanged": [Function],
            "pagingEnabled": true,
            "renderItem": [Function],
            "showsHorizontalScrollIndicator": false,
            "testID": "horizontal-scroll",
            "viewabilityConfig": {
              "viewAreaCoveragePercentThreshold": 95,
              "waitForInteraction": true,
            },
          },
          "renderWindowInsets": {
            "height": 0,
            "width": 0,
          },
          "shouldRefreshWithAnchoring": true,
        }
      }
      maxRenderAhead={750}
      numColumns={1}
      onEndReached={[Function]}
      onEndReachedThreshold={0}
      onEndReachedThresholdRelative={0}
      onItemLayout={[Function]}
      onLayout={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onSizeChanged={[Function]}
      onViewableItemsChanged={[Function]}
      onVisibleIndicesChanged={[Function]}
      pagingEnabled={true}
      removeClippedSubviews={false}
      renderAheadOffset={0}
      renderAheadStep={250}
      renderContentContainer={[Function]}
      renderItem={[Function]}
      renderItemContainer={[Function]}
      rowRenderer={[Function]}
      scrollEventThrottle={16}
      scrollThrottle={16}
      scrollViewProps={
        {
          "contentContainerStyle": {
            "backgroundColor": "#000000",
            "minHeight": 1,
            "minWidth": 1,
            "paddingBottom": 0,
            "paddingTop": 0,
          },
          "onLayout": [Function],
          "onScrollBeginDrag": [Function],
          "refreshControl": undefined,
          "style": {
            "minHeight": 1,
            "minWidth": 1,
          },
        }
      }
      showsHorizontalScrollIndicator={false}
      style={
        {
          "minHeight": 1,
          "minWidth": 1,
        }
      }
      suppressBoundedSizeException={true}
      testID="horizontal-scroll"
      viewabilityConfig={
        {
          "viewAreaCoveragePercentThreshold": 95,
          "waitForInteraction": true,
        }
      }
      windowCorrectionConfig={
        {
          "applyToInitialOffset": true,
          "applyToItemScroll": true,
          "value": {
            "endCorrection": 0,
            "startCorrection": 0,
            "windowShift": -0,
          },
        }
      }
    >
      <View>
        <View
          style={
            {
              "flexDirection": "row",
            }
          }
        >
          <View
            style={
              {
                "paddingLeft": 0,
                "paddingTop": 0,
              }
            }
          />
          <View
            style={
              [
                undefined,
                undefined,
              ]
            }
          />
          <AutoLayoutView
            enableInstrumentation={false}
            horizontal={true}
            onBlankAreaEvent={[Function]}
            onLayout={[Function]}
            renderAheadOffset={0}
            scrollOffset={0}
            style={
              {
                "height": 900,
                "width": 1050,
              }
            }
            windowSize={400}
          >
            <CellContainer
              index={0}
              onLayout={[Function]}
              style={
                {
                  "alignItems": "stretch",
                  "flexDirection": "row",
                  "height": 900,
                  "left": 0,
                  "position": "absolute",
                  "top": 0,
                }
              }
            >
              <View
                style={
                  {
                    "flexDirection": "column",
                  }
                }
              >
                <View>
                  <Text>
                    Item 1
                  </Text>
                </View>
              </View>
            </CellContainer>
            <CellContainer
              index={1}
              onLayout={[Function]}
              style={
                {
                  "alignItems": "stretch",
                  "flexDirection": "row",
                  "height": 900,
                  "left": 350,
                  "position": "absolute",
                  "top": 0,
                }
              }
            >
              <View
                style={
                  {
                    "flexDirection": "column",
                  }
                }
              >
                <View>
                  <Text>
                    Item 2
                  </Text>
                </View>
              </View>
            </CellContainer>
          </AutoLayoutView>
          <CellContainer
            index={-1}
            style={
              [
                undefined,
                undefined,
              ]
            }
          />
          <View
            style={
              {
                "paddingBottom": 0,
                "paddingRight": 0,
              }
            }
          />
          <View
            pointerEvents="none"
            style={
              {
                "opacity": 0,
              }
            }
          >
            <View>
              <Text>
                Item 2
              </Text>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    accessibilityLabel="Scroll right"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "opacity": 1,
        "paddingLeft": 20,
        "paddingRight": 5,
        "paddingVertical": 20,
        "position": "absolute",
        "right": 0,
        "top": 1010,
        "zIndex": 1,
      }
    }
    testID="right-arrow"
  >
    <Image
      source={
        {
          "testUri": "../../../assets/icons/img-swipearrow-right.webp",
        }
      }
      style={
        {
          "transform": [
            {
              "rotate": "0deg",
            },
          ],
        }
      }
    />
  </View>
</View>
`;
